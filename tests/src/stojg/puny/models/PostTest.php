<?php

namespace stojg\puny\models;

/**
 * Test class for Post.
 * Generated by PHPUnit on 2012-06-11 at 16:01:14.
 */
class PostTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Post
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new Post('tests/src/stojg/puny/models/fixtures/2012-06-07-quiz-night.md');
	}

	/**
	 * @covers stojg\puny\models\Post::__construct
	 */
	public function testInit() {
		$this->assertTrue($this->object instanceof Post);
	}

	/**
	 * @covers stojg\puny\models\Post::getContentHTML
	 * @covers stojg\puny\models\Post::load
	 */
	public function testToHTML() {
		// Remove the following lines when you implement this test.
		$expected = "<p>It's that time in the week when 'A foreign affair' goes to the quiz-night at the Grands. We usually ends up at the bottom half in the results. This might be the result of the lack of knowledge we have in things not categorized in either technology, movies or music.</p>

<p>Sometimes we've been lucky enough to hit the second to last place, that given us a whopping $20 bar tab. Split that money on 4-5 people and we can almost get half a beer each.</p>

<p>Usually it's three europeans and one kiwi, but tonight we're getting some help from the french nation.</p>
";
		$this->assertEquals($expected, $this->object->getContentHTML());
	}

	/**
	 * @covers stojg\puny\models\Post::getTitle
	 * @covers stojg\puny\models\Post::setTitle
	 * @covers stojg\puny\models\Post::setMetadata
	 */
	public function testGetTitle() {
		$expected = 'Quiz night';
		$this->assertEquals($expected, $this->object->getTitle());
		$this->object->setTitle('New title');
		$this->assertEquals('New title', $this->object->getTitle());
	}

	/**
	 * @covers stojg\puny\models\Post::getDate
	 * @covers stojg\puny\models\Post::setDate
	 * @covers stojg\puny\models\Post::setMetadata
	 */
	public function testGetDate() {
		$this->assertEquals('2012-06-07 17:42', $this->object->getDate());
		$this->object->setDate('2012-01-01 12:01');
		$this->assertEquals('2012-01-01 12:01', $this->object->getDate());
	}

	/**
	 * @covers stojg\puny\models\Post::getDate
	 */
	public function testGetDateEmptyIsNow() {
		$post = new \stojg\puny\models\Post('/tmp/');
		$this->assertEquals(date('Y-m-d H:i'), $post->getDate());
	}

	/**
	 * @covers stojg\puny\models\Post::getCategories
	 * @covers stojg\puny\models\Post::setCategories
	 * @covers stojg\puny\models\Post::setMetadata
	 */
	public function testGetCategories() {
		$expected = array(
			0 => 'quiz',
			1 => 'bar'
		);
		$this->assertEquals($expected, $this->object->getCategories());
		$this->object->setCategories('one,two,three');
		$this->assertEquals(array('one','two','three'), $this->object->getCategories());
	}

	/**
	 * @covers stojg\puny\models\Post::basename
	 * @covers stojg\puny\models\Post::setMetadata
	 */
	public function testBasename() {
		$expected = '2012-06-07-quiz-night';
		$this->assertEquals($expected, $this->object->basename());
	}

	/**
	 */
	public function testGetContent() {
		$expected = "It's that time in the week when 'A foreign affair' goes to the quiz-night at the Grands. We usually ends up at the bottom half in the results. This might be the result of the lack of knowledge we have in things not categorized in either technology, movies or music.

Sometimes we've been lucky enough to hit the second to last place, that given us a whopping $20 bar tab. Split that money on 4-5 people and we can almost get half a beer each.

Usually it's three europeans and one kiwi, but tonight we're getting some help from the french nation.";
		$this->assertEquals($expected, $this->object->getContent());

		$this->object->setContent('This is the new content');
		$this->assertEquals('This is the new content', $this->object->getContent());
	}

	public function testSave() {
		$post = new Post();
		$post->setDate('2012-01-01 12:12');
		$post->setTitle('New Post');
		$post->setContent('New content');
		$post->save('/tmp/');

		$newPost = new Post('/tmp/2012-01-01-new-post.md');
		$this->assertEquals('New Post', $post->getTitle());

		$newPost->setTitle('change-url');
		$newPost->save('/tmp/');
	}

	public function testDraft() {
		$post = new Post('tests/src/stojg/puny/models/fixtures/2012-07-09-draft-post.md');
		$this->assertTrue($post->draft());
		$post->setDraft(false);
		$this->assertFalse($post->draft());
		$post->setDraft(true);
		$this->assertTrue($post->draft());
	}
}